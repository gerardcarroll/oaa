diff --git a/.gitignore b/.gitignore
index 31f01ae..9299dce 100644
--- a/.gitignore
+++ b/.gitignore
@@ -7,3 +7,4 @@
 /build
 /captures
 .idea
+*.tap
diff --git a/app/src/androidTest/java/com/overstock/android/prototype/espresso/activity/HomeActivityInstrumentationTest_Email.java b/app/src/androidTest/java/com/overstock/android/prototype/espresso/activity/HomeActivityInstrumentationTest_Email.java
new file mode 100644
index 0000000..f6e86c5
--- /dev/null
+++ b/app/src/androidTest/java/com/overstock/android/prototype/espresso/activity/HomeActivityInstrumentationTest_Email.java
@@ -0,0 +1,172 @@
+package com.overstock.android.prototype.espresso.activity;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.clearText;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.RootMatchers.withDecorView;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static org.hamcrest.core.IsNot.not;
+
+import java.util.UUID;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import android.os.SystemClock;
+import android.support.test.espresso.Espresso;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+
+import com.overstock.android.prototype.R;
+import com.overstock.android.prototype.activity.HomeActivity;
+
+/**
+ * Created by gcarroll on 26/04/2016.
+ */
+@RunWith(AndroidJUnit4.class)
+public class HomeActivityInstrumentationTest_Email {
+
+  private static final String registeredUsername = "testuser1@gmail.com";
+
+  private static final String password = "androidsignuptest";
+
+  private static final String passwordConfirm = "androidsignuptest2";
+
+  private static final String uniqueID = UUID.randomUUID().toString();
+
+  private final String newUsername = uniqueID + "@gmail.com";
+
+  @Rule
+  public ActivityTestRule<HomeActivity> activityTestRule = new ActivityTestRule<>(HomeActivity.class, true, false);
+
+  @Before
+  public void setUp() {
+    activityTestRule.launchActivity(null);
+  }
+
+  @Test
+  public void testEmailSignIn_CancelPressed() {
+    navigateToSignInPage();
+    checkElementsOfSignInPageDisplayed();
+    // Click Cancel
+    onView(withId(R.id.btn_email_sign_in_cancel)).perform(click());
+    // Check Connect with Email button is displayed
+    onView(withId(R.id.email_login_btn)).check(matches(isDisplayed()));
+  }
+
+  @Test
+  public void testEmailSignIn_Successful() {
+    navigateToSignInPage();
+    checkElementsOfSignInPageDisplayed();
+    // Enter username/email
+    onView(withId(R.id.et_username)).perform(clearText(), typeText(registeredUsername));
+    // Enter password
+    onView(withId(R.id.et_password)).perform(clearText(), typeText(password));
+    // Close keyboard
+    Espresso.closeSoftKeyboard();
+    // Click Sign In
+    onView(withId(R.id.btn_sign_in)).perform(click());
+    // wait for sign in
+    SystemClock.sleep(2000L);
+    // verify communities page now shown
+    onView(withId(R.id.rvCommunities)).check(matches(isDisplayed()));
+  }
+
+  @Test
+  public void testEmailSignIn_UnSuccessful() {
+    navigateToSignInPage();
+    checkElementsOfSignInPageDisplayed();
+    // Enter username/email
+    onView(withId(R.id.et_username)).perform(clearText(), typeText(registeredUsername));
+    // Enter incorrect password
+    onView(withId(R.id.et_password)).perform(clearText(), typeText("zzzz"));
+    // Close keyboard
+    Espresso.closeSoftKeyboard();
+    // Click Sign In
+    onView(withId(R.id.btn_sign_in)).perform(click());
+    // wait for sign in
+    SystemClock.sleep(2000L);
+    // Check Invalid Username/Password toast is displayed
+    onView(withText("Username or Password invalid."))
+        .inRoot(withDecorView(not(activityTestRule.getActivity().getWindow().getDecorView())))
+        .check(matches(isDisplayed()));
+  }
+
+  @Test
+  public void testEmailSignUp_Successful() {
+    navigateToSignUpPage();
+    onView(withId(R.id.et_username)).perform(clearText(), typeText(newUsername));
+    // Enter password
+    onView(withId(R.id.et_password)).perform(clearText(), typeText(password));
+    // Enter password confirm
+    onView(withId(R.id.et_confirm_password)).perform(clearText(), typeText(password));
+    // Close keyboard
+    Espresso.closeSoftKeyboard();
+    // Click Sign In
+    onView(withId(R.id.btn_sign_up)).perform(click());
+    // wait for sign in
+    SystemClock.sleep(2000L);
+    // verify communities page now shown
+    onView(withId(R.id.rvCommunities)).check(matches(isDisplayed()));
+  }
+
+  @Test
+  public void testEmailSignUp_UnSuccessful_UserAlreadyExists() {
+    navigateToSignUpPage();
+    // Enter username/email
+    onView(withId(R.id.et_username)).perform(clearText(), typeText(registeredUsername));
+    // Enter password
+    onView(withId(R.id.et_password)).perform(clearText(), typeText(password));
+    // Enter password confirm
+    onView(withId(R.id.et_confirm_password)).perform(clearText(), typeText(password));
+    // Close keyboard
+    Espresso.closeSoftKeyboard();
+    // Click Sign In
+    onView(withId(R.id.btn_sign_up)).perform(click());
+    // wait for sign in
+    SystemClock.sleep(2000L);
+    // Check already exists toast is displayed
+    onView(withText("Unsuccessful Sign Up using Email. Account already exists for this username"))
+        .inRoot(withDecorView(not(activityTestRule.getActivity().getWindow().getDecorView())))
+        .check(matches(isDisplayed()));
+  }
+
+  @Test
+  public void testEmailSignUp_CancelPressed() {
+    navigateToSignUpPage();
+    // Click Cancel on SIgn up page
+    onView(withId(R.id.btn_cancel)).perform(click());
+    // Check Sign in page is displayed
+    onView(withId(R.id.txt_email_sign_up_link)).check(matches(isDisplayed()));
+  }
+
+  private void checkElementsOfSignInPageDisplayed() {
+    // Check elements of view are displayed
+    onView(withId(R.id.et_username)).check(matches(isDisplayed()));
+    onView(withId(R.id.et_password)).check(matches(isDisplayed()));
+    onView(withId(R.id.btn_email_sign_in_cancel)).check(matches(isDisplayed()));
+    onView(withId(R.id.btn_sign_in)).check(matches(isDisplayed()));
+    onView(withId(R.id.txt_email_sign_up_link)).check(matches(isDisplayed()));
+  }
+
+  private void navigateToSignInPage() {
+    // Check Connect with Email button is displayed
+    onView(withId(R.id.email_login_btn)).check(matches(isDisplayed()));
+    // Click Connect With Email button
+    onView(withId(R.id.email_login_btn)).perform(click());
+  }
+
+  public void navigateToSignUpPage() {
+    navigateToSignInPage();
+    // Check sign up button displayed
+    onView(withId(R.id.txt_email_sign_up_link)).check(matches(isDisplayed()));
+    // Click sign up
+    onView(withId(R.id.txt_email_sign_up_link)).perform(click());
+  }
+}
diff --git a/app/src/androidTest/java/com/overstock/android/prototype/espresso/dagger/rules/HomeActivityFragmentsModuleMockRule.java b/app/src/androidTest/java/com/overstock/android/prototype/espresso/dagger/rules/HomeActivityFragmentsModuleMockRule.java
index cb8d3ce..9e7cbdf 100644
--- a/app/src/androidTest/java/com/overstock/android/prototype/espresso/dagger/rules/HomeActivityFragmentsModuleMockRule.java
+++ b/app/src/androidTest/java/com/overstock/android/prototype/espresso/dagger/rules/HomeActivityFragmentsModuleMockRule.java
@@ -2,7 +2,7 @@ package com.overstock.android.prototype.espresso.dagger.rules;
 
 import com.overstock.android.prototype.component.HomeActivityComponent;
 import com.overstock.android.prototype.fragment.GoogleFederatedIdentityFragment;
-import com.overstock.android.prototype.module.HomeActivityFragmentsModule;
+import com.overstock.android.prototype.module.HomeActivityModule;
 
 import org.mockito.Mockito;
 
@@ -13,7 +13,7 @@ import it.cosenonjaviste.daggermock.DaggerMockRule;
  */
 public class HomeActivityFragmentsModuleMockRule extends DaggerMockRule<HomeActivityComponent>  {
     public HomeActivityFragmentsModuleMockRule() {
-        super(HomeActivityComponent.class, new HomeActivityFragmentsModule());
+        super(HomeActivityComponent.class, new HomeActivityModule());
         GoogleFederatedIdentityFragment spyGoogleFederatedIdentityFragment = Mockito.spy(new GoogleFederatedIdentityFragment());
         provides(GoogleFederatedIdentityFragment.class, spyGoogleFederatedIdentityFragment);
         set(new ComponentSetter<HomeActivityComponent>(){
diff --git a/app/src/androidTest/java/com/overstock/android/prototype/espresso/fragment/SignInWithEmailFragmentTest.java b/app/src/androidTest/java/com/overstock/android/prototype/espresso/fragment/SignInWithEmailFragmentTest.java
deleted file mode 100644
index 5ecf016..0000000
--- a/app/src/androidTest/java/com/overstock/android/prototype/espresso/fragment/SignInWithEmailFragmentTest.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.overstock.android.prototype.espresso.fragment;
-
-import static android.support.test.espresso.Espresso.onView;
-import static android.support.test.espresso.action.ViewActions.click;
-import static android.support.test.espresso.assertion.ViewAssertions.matches;
-import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
-import static android.support.test.espresso.matcher.ViewMatchers.withId;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import android.support.test.rule.ActivityTestRule;
-import android.support.test.runner.AndroidJUnit4;
-
-import com.overstock.android.prototype.R;
-import com.overstock.android.prototype.activity.HomeActivity;
-
-/**
- * Created by gcarroll on 20/04/2016.
- */
-@RunWith(AndroidJUnit4.class)
-public class SignInWithEmailFragmentTest {
-
-  @Rule
-  public ActivityTestRule<HomeActivity> activityRule = new ActivityTestRule<>(HomeActivity.class, true, false);
-
-  @Before
-  public void setUp() {
-    activityRule.launchActivity(null);
-  }
-
-  @Test
-  public void testEmailSignInPageRendering() {
-    // Click Connect With Email button
-    onView(withId(R.id.email_login_btn)).perform(click());
-    // Check elements of view are displayed
-    onView(withId(R.id.et_username)).check(matches(isDisplayed()));
-    onView(withId(R.id.et_password)).check(matches(isDisplayed()));
-    onView(withId(R.id.btn_email_sign_in_cancel)).check(matches(isDisplayed()));
-    onView(withId(R.id.btn_sign_in)).check(matches(isDisplayed()));
-    onView(withId(R.id.txt_email_sign_up)).check(matches(isDisplayed()));
-  }
-
-}
diff --git a/app/src/androidTest/java/com/overstock/android/prototype/espresso/fragment/SignUpWithEmailFragmentTest.java b/app/src/androidTest/java/com/overstock/android/prototype/espresso/fragment/SignUpWithEmailFragmentTest.java
deleted file mode 100644
index de96ba8..0000000
--- a/app/src/androidTest/java/com/overstock/android/prototype/espresso/fragment/SignUpWithEmailFragmentTest.java
+++ /dev/null
@@ -1,228 +0,0 @@
-package com.overstock.android.prototype.espresso.fragment;
-
-import android.os.SystemClock;
-import android.support.test.espresso.Espresso;
-import android.support.test.rule.ActivityTestRule;
-import android.support.test.runner.AndroidJUnit4;
-
-import com.overstock.android.prototype.R;
-import com.overstock.android.prototype.activity.HomeActivity;
-import com.overstock.android.prototype.espresso.dagger.rules.OAppPrototypeApplicationMockRule;
-
-import org.junit.Before;
-import org.junit.FixMethodOrder;
-import org.junit.Ignore;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.MethodSorters;
-
-import static android.support.test.espresso.Espresso.onView;
-import static android.support.test.espresso.action.ViewActions.clearText;
-import static android.support.test.espresso.action.ViewActions.click;
-import static android.support.test.espresso.action.ViewActions.swipeUp;
-import static android.support.test.espresso.action.ViewActions.typeText;
-import static android.support.test.espresso.assertion.ViewAssertions.matches;
-import static android.support.test.espresso.matcher.RootMatchers.withDecorView;
-import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
-import static android.support.test.espresso.matcher.ViewMatchers.withId;
-import static android.support.test.espresso.matcher.ViewMatchers.withText;
-import static org.hamcrest.core.IsNot.not;
-
-/**
- * Created by rconnolly on 4/20/2016.
- */
-
-@FixMethodOrder(MethodSorters.NAME_ASCENDING)
-@RunWith(AndroidJUnit4.class)
-public class SignUpWithEmailFragmentTest {
-
-    private static final String registeredUsername = "testuser1@gmail.com" ;
-    private final String newUsername = "testuser53@gmail.com" ;
-    private static final String password = "androidsignuptest" ;
-    private static final String passwordConfirm = "androidsignuptest2" ;
-
-    @Rule
-    public OAppPrototypeApplicationMockRule oAppPrototypeApplicationMockRule = new OAppPrototypeApplicationMockRule();
-
-    @Rule
-    public ActivityTestRule<HomeActivity> activityRule = new ActivityTestRule<>(HomeActivity.class, true, false);
-
-    @Before
-    public void setUp() {
-        activityRule.launchActivity(null);
-    }
-
-    @Test
-    public void testConnectWithEmailButtonRendering() {
-
-        // Check Connect with Email button is displayed
-        onView(withId(R.id.email_login_btn)).check(matches(isDisplayed()));
-    }
-
-    @Test
-    public void testSignUpScreenFlow(){
-
-        // Check Connect with Email button is displayed on Home Activity
-        onView(withId(R.id.email_login_btn)).check(matches(isDisplayed()));
-
-        // Click Connect with Email button on Home Activity
-        onView(withId(R.id.email_login_btn)).perform(click());
-
-        // Check Sign Up link text is displayed on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).check(matches(isDisplayed()));
-
-        // Click Sign Up link text on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).perform(click());
-
-        // Check Sign Up button is displayed on Sign Up fragment
-        onView(withId(R.id.btn_sign_up)).check(matches(isDisplayed()));
-    }
-
-    @Test
-    public void testRequiredFieldsToastIsDisplayed(){
-
-        // Check Connect with Email button is displayed on Home Activity
-        onView(withId(R.id.email_login_btn)).check(matches(isDisplayed()));
-
-        // Click Connect with Email button on Home Activity
-        onView(withId(R.id.email_login_btn)).perform(click());
-
-        // Check Sign Up link text is displayed on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).check(matches(isDisplayed()));
-
-        // Click Sign Up link text on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).perform(click());
-
-        // Check Sign Up button is displayed on Sign Up fragment
-        onView(withId(R.id.btn_sign_up)).check(matches(isDisplayed()));
-
-        // Click Sign Up link text on Sign In fragment
-        onView(withId(R.id.btn_sign_up)).perform(click());
-
-        // Check Error message Toast is displayed on Sign Up fragment
-        onView(withText(activityRule.getActivity().getResources().getString(R.string.sign_up_required_fields_message)))
-                .inRoot(withDecorView(not(activityRule.getActivity().getWindow().getDecorView())))
-                .check(matches(isDisplayed()));
-
-    }
-
-    @Test
-    public void testPasswordConfirmToastIsDisplayed(){
-
-        // Check Connect with Email button is displayed on Home Activity
-        onView(withId(R.id.email_login_btn)).check(matches(isDisplayed()));
-
-        // Click Connect with Email button on Home Activity
-        onView(withId(R.id.email_login_btn)).perform(click());
-
-        // Check Sign Up link text is displayed on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).check(matches(isDisplayed()));
-
-        // Click Sign Up link text on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).perform(click());
-
-        // Check Sign Up button is displayed on Sign Up fragment
-        onView(withId(R.id.btn_sign_up)).check(matches(isDisplayed()));
-
-        // Enter newUsername
-        onView(withId(R.id.et_username)).perform(clearText(), typeText(newUsername));
-
-        // Enter password
-        onView(withId(R.id.et_password)).perform(clearText(), typeText(password));
-
-        onView(withId(R.id.email_connect_common)).perform(swipeUp());
-
-        onView(withId(R.id.et_confirm_password)).check(matches(isDisplayed()));
-
-        // Enter password confirmation
-        onView(withId(R.id.et_confirm_password)).perform(clearText(), typeText(passwordConfirm));
-
-        // Close keyboard
-        Espresso.closeSoftKeyboard();
-
-        // Click Sign Up link text on Sign In fragment
-        onView(withId(R.id.btn_sign_up)).perform(click());
-
-        // Check Error message Toast is displayed on Sign Up fragment
-        onView(withText(activityRule.getActivity().getResources().getString(R.string.sign_up_passwordconfirm_error_message)))
-                .inRoot(withDecorView(not(activityRule.getActivity().getWindow().getDecorView()))).check(matches(isDisplayed()));
-        SystemClock.sleep(3000);
-    }
-
-    //TODO
-    @Ignore
-    @Test
-    public void testSignUpUnsuccessfulToastIsDisplayed(){
-
-        // Check Connect with Email button is displayed on Home Activity
-        onView(withId(R.id.email_login_btn)).check(matches(isDisplayed()));
-
-        // Click Connect with Email button on Home Activity
-        onView(withId(R.id.email_login_btn)).perform(click());
-
-        // Check Sign Up link text is displayed on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).check(matches(isDisplayed()));
-
-        // Click Sign Up link text on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).perform(click());
-
-        // Check Sign Up button is displayed on Sign Up fragment
-        onView(withId(R.id.btn_sign_up)).check(matches(isDisplayed()));
-
-        // Enter registeredUsername
-        onView(withId(R.id.et_username)).perform(clearText(), typeText(registeredUsername));
-
-        // Enter password
-        onView(withId(R.id.et_password)).perform(clearText(), typeText(password));
-
-        // Enter password confirmation
-        onView(withId(R.id.et_confirm_password)).perform(clearText(), typeText(password));
-
-        // Close keyboard
-        Espresso.closeSoftKeyboard();
-
-        // Click Sign Up link text on Sign In fragment
-        onView(withId(R.id.btn_sign_up)).perform(click());
-
-    }
-
-    //TODO
-    @Ignore
-    @Test
-    public void testSignUpSuccessfulToastIsDisplayed(){
-
-        // Check Connect with Email button is displayed on Home Activity
-        onView(withId(R.id.email_login_btn)).check(matches(isDisplayed()));
-
-        // Click Connect with Email button on Home Activity
-        onView(withId(R.id.email_login_btn)).perform(click());
-
-        // Check Sign Up link text is displayed on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).check(matches(isDisplayed()));
-
-        // Click Sign Up link text on Sign In fragment
-        onView(withId(R.id.txt_email_sign_up)).perform(click());
-
-        // Check Sign Up button is displayed on Sign Up fragment
-        onView(withId(R.id.btn_sign_up)).check(matches(isDisplayed()));
-
-        // Enter newUsername
-        onView(withId(R.id.et_username)).perform(clearText(), typeText(newUsername));
-
-        // Enter password
-        onView(withId(R.id.et_password)).perform(clearText(), typeText(password));
-
-        // Enter password confirmation
-        onView(withId(R.id.et_confirm_password)).perform(clearText(), typeText(password));
-
-        // Close keyboard
-        Espresso.closeSoftKeyboard();
-
-        // Click Sign Up link text on Sign In fragment
-        onView(withId(R.id.btn_sign_up)).check(matches(isDisplayed()));
-        onView(withId(R.id.btn_sign_up)).perform(click());
-
-    }
-
-}
diff --git a/app/src/main/java/com/overstock/android/prototype/activity/HomeActivity.java b/app/src/main/java/com/overstock/android/prototype/activity/HomeActivity.java
index 36d0eb4..28320fa 100644
--- a/app/src/main/java/com/overstock/android/prototype/activity/HomeActivity.java
+++ b/app/src/main/java/com/overstock/android/prototype/activity/HomeActivity.java
@@ -18,12 +18,12 @@ public class HomeActivity extends AppCompatActivity {
   @Override
   protected void onCreate(final Bundle savedInstanceState) {
     // Dagger init
-    HomeActivityComponent.Initializer.init().inject(this);
+    HomeActivityComponent.Initializer.init(this).inject(this);
 
     super.onCreate(savedInstanceState);
     setContentView(R.layout.activity_home);
     if (savedInstanceState == null) {
-      getSupportFragmentManager().beginTransaction().add(R.id.home_activity, homeFragment,HomeFragment.TAG).commit();
+      getSupportFragmentManager().beginTransaction().add(R.id.home_activity, homeFragment, HomeFragment.TAG).commit();
     }
   }
 
diff --git a/app/src/main/java/com/overstock/android/prototype/component/ApplicationComponent.java b/app/src/main/java/com/overstock/android/prototype/component/ApplicationComponent.java
index df30541..a32a264 100644
--- a/app/src/main/java/com/overstock/android/prototype/component/ApplicationComponent.java
+++ b/app/src/main/java/com/overstock/android/prototype/component/ApplicationComponent.java
@@ -17,7 +17,8 @@ public interface ApplicationComponent extends ApplicationInject {
 
     final class Initializer{
         public static ApplicationComponent init(Application application){
-            return DaggerApplicationComponent.builder().applicationModule(new ApplicationModule(application)).build();
+            return DaggerApplicationComponent.builder()
+                    .applicationModule(new ApplicationModule(application)).build();
         }
     }
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/component/ApplicationInject.java b/app/src/main/java/com/overstock/android/prototype/component/ApplicationInject.java
index 083f4e5..79f34d4 100644
--- a/app/src/main/java/com/overstock/android/prototype/component/ApplicationInject.java
+++ b/app/src/main/java/com/overstock/android/prototype/component/ApplicationInject.java
@@ -9,8 +9,6 @@ import com.overstock.android.prototype.fragment.BrandFragment;
 import com.overstock.android.prototype.fragment.GoogleFederatedIdentityFragment;
 import com.overstock.android.prototype.fragment.ProductBottomSheetFragment;
 import com.overstock.android.prototype.fragment.ProductDetailsFragment;
-import com.overstock.android.prototype.fragment.SignInWithEmailFragment;
-import com.overstock.android.prototype.fragment.SignUpWithEmailFragment;
 import com.overstock.android.prototype.model.ProductDataService;
 import com.overstock.android.prototype.service.OappGoogleAuthService;
 
@@ -38,9 +36,4 @@ public interface ApplicationInject {
   void inject(final CommunityActivity communitiesActivity);
 
   void inject(final ProductBottomSheetFragment productBottomSheetFragment);
-
-  void inject(final SignInWithEmailFragment signInWithEmailFragment);
-
-  void inject(final SignUpWithEmailFragment signUpWithEmailFragment);
-
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/component/HomeActivityComponent.java b/app/src/main/java/com/overstock/android/prototype/component/HomeActivityComponent.java
index a1b412b..f330e67 100644
--- a/app/src/main/java/com/overstock/android/prototype/component/HomeActivityComponent.java
+++ b/app/src/main/java/com/overstock/android/prototype/component/HomeActivityComponent.java
@@ -1,25 +1,28 @@
 package com.overstock.android.prototype.component;
 
-import com.overstock.android.prototype.activity.HomeActivity;
-import com.overstock.android.prototype.module.HomeActivityFragmentsModule;
+import android.content.Context;
+
+import com.overstock.android.prototype.main.OAppPrototypeApplication;
+import com.overstock.android.prototype.module.HomeActivityModule;
 import com.overstock.android.prototype.module.scope.ActivityScope;
 
 import dagger.Component;
-import dagger.Provides;
 
 /**
  * Created by itowey on 11/03/16.
  */
 @ActivityScope
 @Component(
-        modules = {HomeActivityFragmentsModule.class}
+        dependencies = { ApplicationComponent.class },
+        modules = { HomeActivityModule.class }
 )
 public interface HomeActivityComponent extends HomeActivityInject {
 
-    final class Initializer {
-        public static HomeActivityComponent init() {
-            return DaggerHomeActivityComponent.builder()
-                    .build();
-        }
+  final class Initializer {
+    public static HomeActivityComponent init(Context context) {
+      return DaggerHomeActivityComponent.builder()
+                .applicationComponent(OAppPrototypeApplication.get(context).getComponent())
+              .build();
     }
+  }
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/component/HomeActivityInject.java b/app/src/main/java/com/overstock/android/prototype/component/HomeActivityInject.java
index 744fde3..aa17e47 100644
--- a/app/src/main/java/com/overstock/android/prototype/component/HomeActivityInject.java
+++ b/app/src/main/java/com/overstock/android/prototype/component/HomeActivityInject.java
@@ -2,11 +2,18 @@ package com.overstock.android.prototype.component;
 
 import com.overstock.android.prototype.activity.HomeActivity;
 import com.overstock.android.prototype.fragment.HomeFragment;
+import com.overstock.android.prototype.fragment.SignInWithEmailFragment;
+import com.overstock.android.prototype.fragment.SignUpWithEmailFragment;
 
 /**
  * Created by itowey on 11/03/16.
  */
 public interface HomeActivityInject {
-    void inject(HomeActivity homeActivity);
-    void inject(HomeFragment homeFragment);
+  void inject(HomeActivity homeActivity);
+
+  void inject(HomeFragment homeFragment);
+
+  void inject(SignInWithEmailFragment signInWithEmailFragment);
+
+  void inject(SignUpWithEmailFragment signUpWithEmailFragment);
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/fragment/BrandFragment.java b/app/src/main/java/com/overstock/android/prototype/fragment/BrandFragment.java
index 4e3a019..360cf0d 100644
--- a/app/src/main/java/com/overstock/android/prototype/fragment/BrandFragment.java
+++ b/app/src/main/java/com/overstock/android/prototype/fragment/BrandFragment.java
@@ -1,5 +1,9 @@
 package com.overstock.android.prototype.fragment;
 
+import java.util.ArrayList;
+
+import javax.inject.Inject;
+
 import android.os.Bundle;
 import android.support.design.widget.AppBarLayout;
 import android.support.design.widget.CollapsingToolbarLayout;
@@ -14,104 +18,99 @@ import android.view.MenuInflater;
 import android.view.View;
 import android.view.ViewGroup;
 
+import butterknife.Bind;
+import butterknife.ButterKnife;
+
 import com.overstock.android.prototype.R;
 import com.overstock.android.prototype.main.OAppPrototypeApplication;
 import com.overstock.android.prototype.model.Product;
 import com.overstock.android.prototype.presenter.BrandPresenter;
 import com.overstock.android.prototype.view.BrandView;
 
-import java.util.ArrayList;
-
-import javax.inject.Inject;
-
-import butterknife.Bind;
-import butterknife.ButterKnife;
 import de.hdodenhof.circleimageview.CircleImageView;
 
 /**
  * @author LeeMeehan Created on 07-03-2016
  */
 public class BrandFragment extends Fragment implements BrandView {
-    private static final String TAG = BrandFragment.class.getName();
-
-    @Inject
-    BrandPresenter presenter;
-
-    @Bind(R.id.brand_scroll)
-    NestedScrollView scrollView;
-
-    @Bind(R.id.brand_collapsing_toolbar)
-    CollapsingToolbarLayout collapsingToolbarLayout;
-
-    @Bind(R.id.brand_appBar)
-    AppBarLayout appBarLayout;
-
-    @Bind(R.id.brand_toolbar)
-    Toolbar toolbar;
-
-    @Bind(R.id.brand_logo_icon)
-    CircleImageView imageView;
-
-    @Override
-    public void onCreate(final Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        ((OAppPrototypeApplication) getActivity().getApplication()).getComponent().inject(this);
-    }
-
-    @Override
-    public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) {
-        return inflater.inflate(R.layout.fragment_brand, container, false);
-    }
-
-    @Override
-    public void onViewCreated(final View view, final Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        ButterKnife.bind(this, view);
-        toolbar.inflateMenu(R.menu.menu_main);
-
-        final AppBarLayout.OnOffsetChangedListener listener = new AppBarLayout.OnOffsetChangedListener() {
-            @Override
-            public void onOffsetChanged(final AppBarLayout appBarLayout, final int verticalOffset) {
-                if (collapsingToolbarLayout.getHeight() + verticalOffset < 2
-                        * ViewCompat.getMinimumHeight(collapsingToolbarLayout)) {
-                    imageView.animate().alpha(1).rotation(-360).setDuration(600);
-                } else {
-                    imageView.animate().alpha(0).rotation(360).setDuration(600);
-                }
-            }
-        };
-        appBarLayout.addOnOffsetChangedListener(listener);
-        presenter.setView(this);
-    }
-
-    @Override
-    public void onCreateOptionsMenu(final Menu menu, final MenuInflater inflater) {
-        inflater.inflate(R.menu.menu_main, menu);
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-        ButterKnife.unbind(this);
-        presenter.onDestroy();
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-    }
-
-    @Override
-    public void addHorizontalRecyclerView(
-            final int layoutResourceId, final ArrayList<Product> products, final String displayText) {
-        Log.d(TAG, "Passing " +
-                displayText + " products to adapter to be displayed. List size : " +
-                products.size() + "\t\t" + getChildFragmentManager().getBackStackEntryCount());
-
-            getChildFragmentManager()
-                    .beginTransaction()
-                    .replace(layoutResourceId, HorizontialScrollFragment.newInstance(products, displayText), displayText)
-                    .commit();
-    }
+  private static final String TAG = BrandFragment.class.getName();
+
+  @Inject
+  BrandPresenter presenter;
+
+  @Bind(R.id.brand_scroll)
+  NestedScrollView scrollView;
+
+  @Bind(R.id.brand_collapsing_toolbar)
+  CollapsingToolbarLayout collapsingToolbarLayout;
+
+  @Bind(R.id.brand_appBar)
+  AppBarLayout appBarLayout;
+
+  @Bind(R.id.brand_toolbar)
+  Toolbar toolbar;
+
+  @Bind(R.id.brand_logo_icon)
+  CircleImageView imageView;
+
+  @Override
+  public void onCreate(final Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    ((OAppPrototypeApplication) getActivity().getApplication()).getComponent().inject(this);
+  }
+
+  @Override
+  public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) {
+    return inflater.inflate(R.layout.fragment_brand, container, false);
+  }
+
+  @Override
+  public void onViewCreated(final View view, final Bundle savedInstanceState) {
+    super.onViewCreated(view, savedInstanceState);
+    ButterKnife.bind(this, view);
+    toolbar.inflateMenu(R.menu.menu_main);
+
+    final AppBarLayout.OnOffsetChangedListener listener = new AppBarLayout.OnOffsetChangedListener() {
+      @Override
+      public void onOffsetChanged(final AppBarLayout appBarLayout, final int verticalOffset) {
+        if (collapsingToolbarLayout.getHeight() + verticalOffset < 2
+          * ViewCompat.getMinimumHeight(collapsingToolbarLayout)) {
+          imageView.animate().alpha(1).rotation(-360).setDuration(600);
+        }
+        else {
+          imageView.animate().alpha(0).rotation(360).setDuration(600);
+        }
+      }
+    };
+    appBarLayout.addOnOffsetChangedListener(listener);
+    presenter.setView(this);
+  }
+
+  @Override
+  public void onCreateOptionsMenu(final Menu menu, final MenuInflater inflater) {
+    inflater.inflate(R.menu.menu_main, menu);
+  }
+
+  @Override
+  public void onDestroyView() {
+    super.onDestroyView();
+    ButterKnife.unbind(this);
+    presenter.onDestroy();
+  }
+
+  @Override
+  public void onResume() {
+    super.onResume();
+  }
+
+  @Override
+  public void addHorizontalRecyclerView(final int layoutResourceId, final ArrayList<Product> products,
+    final String displayText) {
+    Log.d(TAG, "Passing " + displayText + " products to adapter to be displayed. List size : " + products.size()
+      + "\t\t" + getChildFragmentManager().getBackStackEntryCount());
+
+    getChildFragmentManager().beginTransaction()
+        .replace(layoutResourceId, HorizontialScrollFragment.newInstance(products, displayText), displayText).commit();
+  }
 
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/fragment/HomeFragment.java b/app/src/main/java/com/overstock/android/prototype/fragment/HomeFragment.java
index 79519e4..c5ae4b2 100644
--- a/app/src/main/java/com/overstock/android/prototype/fragment/HomeFragment.java
+++ b/app/src/main/java/com/overstock/android/prototype/fragment/HomeFragment.java
@@ -35,7 +35,7 @@ public class HomeFragment extends Fragment {
     View rootView = inflater.inflate(R.layout.fragment_home, container, false);
     ButterKnife.bind(this, rootView);
     // Dagger init
-    HomeActivityComponent.Initializer.init().inject(this);
+    HomeActivityComponent.Initializer.init(this.getActivity()).inject(this);
     return rootView;
   }
 
diff --git a/app/src/main/java/com/overstock/android/prototype/fragment/SignInWithEmailFragment.java b/app/src/main/java/com/overstock/android/prototype/fragment/SignInWithEmailFragment.java
index d8deb51..c6413a6 100644
--- a/app/src/main/java/com/overstock/android/prototype/fragment/SignInWithEmailFragment.java
+++ b/app/src/main/java/com/overstock/android/prototype/fragment/SignInWithEmailFragment.java
@@ -2,9 +2,12 @@ package com.overstock.android.prototype.fragment;
 
 import javax.inject.Inject;
 
+import android.content.Intent;
 import android.os.Bundle;
+import android.support.v4.app.ActivityOptionsCompat;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentTransaction;
+import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -12,13 +15,15 @@ import android.view.ViewGroup;
 import android.view.inputmethod.EditorInfo;
 import android.widget.EditText;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import butterknife.Bind;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 
 import com.overstock.android.prototype.R;
-import com.overstock.android.prototype.main.OAppPrototypeApplication;
+import com.overstock.android.prototype.activity.CommunityActivity;
+import com.overstock.android.prototype.component.HomeActivityComponent;
 import com.overstock.android.prototype.presenter.SignInWithEmailPresenter;
 import com.overstock.android.prototype.view.SignInWithEmailView;
 
@@ -45,7 +50,7 @@ public class SignInWithEmailFragment extends Fragment implements SignInWithEmail
   @Override
   public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    ((OAppPrototypeApplication) getActivity().getApplication()).getComponent().inject(this);
+    HomeActivityComponent.Initializer.init(this.getActivity()).inject(this);
   }
 
   @Override
@@ -58,7 +63,7 @@ public class SignInWithEmailFragment extends Fragment implements SignInWithEmail
     return rootView;
   }
 
-  @OnClick(R.id.txt_email_sign_up)
+  @OnClick(R.id.txt_email_sign_up_link)
   public void emailSignUp_onClick() {
     FragmentTransaction fragmentTransaction = getFragmentManager().beginTransaction();
     fragmentTransaction.replace(R.id.home_activity, new SignUpWithEmailFragment(), SignUpWithEmailFragment.TAG);
@@ -73,8 +78,9 @@ public class SignInWithEmailFragment extends Fragment implements SignInWithEmail
 
   @Override
   @OnClick(R.id.btn_sign_in)
-  public void OnSignInClick() {
-    signInWithEmailPresenter.onSignIn(usernameEditText.getText().toString(), passwordEditText.getText().toString());
+  public void onSignInClick() {
+    signInWithEmailPresenter.validateCredentials(usernameEditText.getText().toString(),
+      passwordEditText.getText().toString());
   }
 
   @Override
@@ -84,6 +90,20 @@ public class SignInWithEmailFragment extends Fragment implements SignInWithEmail
     signInWithEmailPresenter.onDestroy();
   }
 
+  @Override
+  public void navigateToCommunity() {
+    final ActivityOptionsCompat options = ActivityOptionsCompat.makeCustomAnimation(getContext(),
+      R.transition.slide_in_vertical, R.transition.slide_out_vertical);
+    startActivity(new Intent(getActivity(), CommunityActivity.class), options.toBundle());
+  }
+
+  @Override
+  public void displayToast(String toastMessage) {
+    final Toast toast = Toast.makeText(getActivity(), toastMessage, Toast.LENGTH_LONG);
+    toast.setGravity(Gravity.BOTTOM, 0, 20);
+    toast.show();
+  }
+
   /**
    * This listens to when the Done key is pressed when the user is on the password text box. If pressed the onSignIn
    * method is called in the presenter
@@ -93,8 +113,7 @@ public class SignInWithEmailFragment extends Fragment implements SignInWithEmail
       @Override
       public boolean onEditorAction(TextView exampleView, int actionId, KeyEvent event) {
         if (actionId == EditorInfo.IME_ACTION_DONE) {
-          signInWithEmailPresenter.onSignIn(usernameEditText.getText().toString(),
-            passwordEditText.getText().toString());
+          onSignInClick();
           return true;
         }
         else {
diff --git a/app/src/main/java/com/overstock/android/prototype/fragment/SignUpWithEmailFragment.java b/app/src/main/java/com/overstock/android/prototype/fragment/SignUpWithEmailFragment.java
index c89f143..e4f87f2 100644
--- a/app/src/main/java/com/overstock/android/prototype/fragment/SignUpWithEmailFragment.java
+++ b/app/src/main/java/com/overstock/android/prototype/fragment/SignUpWithEmailFragment.java
@@ -24,7 +24,7 @@ import butterknife.OnClick;
 
 import com.overstock.android.prototype.R;
 import com.overstock.android.prototype.activity.CommunityActivity;
-import com.overstock.android.prototype.main.OAppPrototypeApplication;
+import com.overstock.android.prototype.component.HomeActivityComponent;
 import com.overstock.android.prototype.presenter.SignUpWithEmailPresenter;
 import com.overstock.android.prototype.view.SignUpWithEmailView;
 
@@ -33,118 +33,96 @@ import com.overstock.android.prototype.view.SignUpWithEmailView;
  */
 public class SignUpWithEmailFragment extends Fragment implements SignUpWithEmailView {
 
-    public static final String TAG = SignUpWithEmailFragment.class.getName();
-
-    @Inject
-    SignUpWithEmailPresenter signUpWithEmailPresenter;
-
-    @Bind(R.id.et_username)
-    EditText usernameEditText;
-
-    @Bind(R.id.et_password)
-    EditText passwordEditText;
-
-    @Bind(R.id.et_confirm_password)
-    EditText confirmPasswordEditText;
-
-    @Bind(R.id.btn_cancel)
-    Button cancelButton;
-
-    @Bind(R.id.btn_sign_up)
-    Button signUpButton;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        ((OAppPrototypeApplication) getActivity().getApplication()).getComponent().inject(this);
-    }
-
-    @Nullable
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        return inflater.inflate(R.layout.fragment_sign_up_with_email, container, false);
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        ButterKnife.bind(this, view);
-        signUpWithEmailPresenter.setView(this);
-        onDoneKeyPressedListener();
-    }
-
-    @OnClick(R.id.btn_cancel)
-    public void onCancelClick() {
-        getActivity().onBackPressed();
-    }
-
-    @Override
-    @OnClick(R.id.btn_sign_up)
-    public void OnSignUpClick() {
-        validateCredentials();
-    }
-
-    private void validateCredentials() {
-        String username = usernameEditText.getText().toString();
-        String password = passwordEditText.getText().toString();
-        String passwordConfirm = confirmPasswordEditText.getText().toString();
-
-        if (username.isEmpty() || password.isEmpty() || passwordConfirm.isEmpty()) {
-            displayToast(getActivity().getApplicationContext().getResources().getString(R.string.sign_up_required_fields_message));
-        } else if (!password.equals(passwordConfirm)) {
-            displayToast(getActivity().getApplicationContext().getResources().getString(R.string.sign_up_passwordconfirm_error_message));
-        } else {
-            signUpWithEmailPresenter.onSignUp(username, password);
+  public static final String TAG = SignUpWithEmailFragment.class.getName();
+
+  @Inject
+  SignUpWithEmailPresenter signUpWithEmailPresenter;
+
+  @Bind(R.id.et_username)
+  EditText usernameEditText;
+
+  @Bind(R.id.et_password)
+  EditText passwordEditText;
+
+  @Bind(R.id.et_confirm_password)
+  EditText confirmPasswordEditText;
+
+  @Bind(R.id.btn_cancel)
+  Button cancelButton;
+
+  @Bind(R.id.btn_sign_up)
+  Button signUpButton;
+
+  @Override
+  public void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    HomeActivityComponent.Initializer.init(this.getActivity()).inject(this);
+  }
+
+  @Nullable
+  @Override
+  public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+    return inflater.inflate(R.layout.fragment_sign_up_with_email, container, false);
+  }
+
+  @Override
+  public void onViewCreated(View view, Bundle savedInstanceState) {
+    super.onViewCreated(view, savedInstanceState);
+    ButterKnife.bind(this, view);
+    signUpWithEmailPresenter.setView(this);
+    onDoneKeyPressedListener();
+  }
+
+  @OnClick(R.id.btn_cancel)
+  public void onCancelClick() {
+    getActivity().onBackPressed();
+  }
+
+  @Override
+  @OnClick(R.id.btn_sign_up)
+  public void onSignUpClick() {
+    signUpWithEmailPresenter.validateCredentials(usernameEditText.getText().toString(),
+      passwordEditText.getText().toString(), confirmPasswordEditText.getText().toString());
+  }
+
+  @Override
+  public void navigateToCommunity() {
+    final ActivityOptionsCompat options = ActivityOptionsCompat.makeCustomAnimation(getContext(),
+      R.transition.slide_in_vertical, R.transition.slide_out_vertical);
+    startActivity(new Intent(getActivity(), CommunityActivity.class), options.toBundle());
+  }
+
+  @Override
+  public void displayToast(String toastMessage) {
+    final Toast toast = Toast.makeText(getActivity(), toastMessage, Toast.LENGTH_LONG);
+    toast.setGravity(Gravity.BOTTOM, 0, 20);
+    toast.show();
+  }
+
+  @Override
+  public void onDestroyView() {
+    super.onDestroyView();
+    ButterKnife.unbind(this);
+    signUpWithEmailPresenter.onDestroy();
+  }
+
+  /**
+   * This listens to when the Done key is pressed when the user is on the password text box. If pressed the onSignIn
+   * method is called in the presenter
+   */
+  private void onDoneKeyPressedListener() {
+    confirmPasswordEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+      @Override
+      public boolean onEditorAction(TextView exampleView, int actionId, KeyEvent event) {
+        if (actionId == EditorInfo.IME_ACTION_DONE) {
+          onSignUpClick();
+          return true;
         }
-    }
-
-    @Override
-    public void navigateToCommunity() {
-        final ActivityOptionsCompat options = ActivityOptionsCompat.makeCustomAnimation(getContext(),
-                R.transition.slide_in_vertical, R.transition.slide_out_vertical);
-        startActivity(new Intent(getActivity(), CommunityActivity.class), options.toBundle());
-    }
-
-    @Override
-    public void showSignUpSuccess() {
-        displayToast(getActivity().getApplicationContext().getResources().getString(R.string.successful_oapp_sign_up_message));
-    }
-
-    @Override
-    public void showSignUpError() {
-        displayToast(getActivity().getApplicationContext().getResources().getString(R.string.unsuccessful_oapp_sign_up_message));
-    }
-
-    @Override
-    public void displayToast(String toastMessage) {
-        final Toast toast = Toast.makeText(getActivity(), toastMessage, Toast.LENGTH_LONG);
-        toast.setGravity(Gravity.BOTTOM, 0, 20);
-        toast.show();
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-        ButterKnife.unbind(this);
-        signUpWithEmailPresenter.onDestroy();
-    }
-
-    /**
-     * This listens to when the Done key is pressed when the user is on the password text box. If pressed the onSignIn
-     * method is called in the presenter
-     */
-    private void onDoneKeyPressedListener() {
-        confirmPasswordEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView exampleView, int actionId, KeyEvent event) {
-                if (actionId == EditorInfo.IME_ACTION_DONE) {
-                    validateCredentials();
-                    return true;
-                } else {
-                    return false;
-                }
-            }
-        });
-    }
+        else {
+          return false;
+        }
+      }
+    });
+  }
 
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/main/OAppPrototypeApplication.java b/app/src/main/java/com/overstock/android/prototype/main/OAppPrototypeApplication.java
index 5467d44..cf7daf0 100644
--- a/app/src/main/java/com/overstock/android/prototype/main/OAppPrototypeApplication.java
+++ b/app/src/main/java/com/overstock/android/prototype/main/OAppPrototypeApplication.java
@@ -5,10 +5,13 @@ import android.content.Context;
 import android.os.Build;
 import android.os.StrictMode;
 import android.support.annotation.VisibleForTesting;
+import android.util.Log;
 
 import com.crashlytics.android.Crashlytics;
 import com.overstock.android.prototype.BuildConfig;
+import com.overstock.android.prototype.R;
 import com.overstock.android.prototype.component.ApplicationComponent;
+import com.parse.Parse;
 
 import io.fabric.sdk.android.Fabric;
 
@@ -17,7 +20,8 @@ import io.fabric.sdk.android.Fabric;
  */
 public class OAppPrototypeApplication extends Application {
 
-  ApplicationComponent component;
+  private static final String TAG = OAppPrototypeApplication.class.getName();
+  protected ApplicationComponent component;
 
   public static OAppPrototypeApplication get(Context context) {
     return (OAppPrototypeApplication) context.getApplicationContext();
@@ -34,6 +38,10 @@ public class OAppPrototypeApplication extends Application {
     Fabric.with(this, new Crashlytics());
     // Dagger init
     component = ApplicationComponent.Initializer.init(this);
+    Parse.initialize(new Parse.Configuration.Builder(this)
+            .applicationId(this.getString(R.string.parse_application_id))
+            .server(this.getString(R.string.parse_service_url)).build());
+    Log.d(TAG,"app initialized");
   }
 
   public ApplicationComponent getComponent() {
diff --git a/app/src/main/java/com/overstock/android/prototype/module/ApplicationModule.java b/app/src/main/java/com/overstock/android/prototype/module/ApplicationModule.java
index 5eb29bb..c0e6125 100644
--- a/app/src/main/java/com/overstock/android/prototype/module/ApplicationModule.java
+++ b/app/src/main/java/com/overstock/android/prototype/module/ApplicationModule.java
@@ -10,18 +10,12 @@ import com.overstock.android.prototype.presenter.BrandPresenter;
 import com.overstock.android.prototype.presenter.CommunityPresenter;
 import com.overstock.android.prototype.presenter.ProductBottomSheetPresenter;
 import com.overstock.android.prototype.presenter.ProductDetailPresenter;
-import com.overstock.android.prototype.presenter.SignInWithEmailPresenter;
-import com.overstock.android.prototype.presenter.SignUpWithEmailPresenter;
 import com.overstock.android.prototype.presenter.impl.BrandPresenterImpl;
 import com.overstock.android.prototype.presenter.impl.CommunityPresenterImpl;
 import com.overstock.android.prototype.presenter.impl.ProductBottomSheetPresenterImpl;
 import com.overstock.android.prototype.presenter.impl.ProductDetailPresenterImpl;
-import com.overstock.android.prototype.presenter.impl.SignInWithEmailPresenterImpl;
-import com.overstock.android.prototype.presenter.impl.SignUpWithEmailPresenterImpl;
 import com.overstock.android.prototype.service.CommunityService;
 import com.overstock.android.prototype.service.OappGoogleAuthService;
-import com.overstock.android.prototype.service.ParseInit;
-import com.overstock.android.prototype.service.ParseService;
 import com.overstock.android.prototype.service.ProductService;
 import com.squareup.picasso.LruCache;
 import com.squareup.picasso.Picasso;
@@ -33,7 +27,6 @@ import dagger.Provides;
  * @author LeeMeehan Created on 03-Mar-16.
  */
 @Module
-@ApplicationScope
 public class ApplicationModule {
 
   Application application;
@@ -43,61 +36,74 @@ public class ApplicationModule {
   }
 
   @Provides
+  @ApplicationScope
   public Application providesApplication() {
     return application;
   }
 
   @Provides
+  @ApplicationScope
   public BrandPresenter providesBrandPresenter(final ProductDataService productDataService) {
     return new BrandPresenterImpl(productDataService);
   }
 
   @Provides
+  @ApplicationScope
   public ProductDetailPresenter productDetailPresenter(final Application applicationContext,
     final ProductDataService productDataService) {
     return new ProductDetailPresenterImpl(applicationContext, productDataService);
   }
 
+  @Provides
+  @ApplicationScope
   public ProductDataService providesProductDataService(final ProductService productService) {
     return new ProductDataService(productService);
   }
 
   @Provides
+  @ApplicationScope
   public CommunityPresenter communitiesPresenter(CommunityService communityService) {
     return new CommunityPresenterImpl(communityService);
   }
 
   @Provides
+  @ApplicationScope
   public CommunityClient providesCommunityClient(Application application) {
     return new CommunityClient(application.getApplicationContext());
   }
 
   @Provides
+  @ApplicationScope
   public TheOAppClient providesTheOAppClient(Application application) {
     return new TheOAppClient(application.getApplicationContext());
   }
 
   @Provides
+  @ApplicationScope
   public CommunityService providesCommunityService(final CommunityClient communityClient) {
     return communityClient.getClient();
   }
 
   @Provides
+  @ApplicationScope
   public ProductBottomSheetPresenter productBottomSheetPresenter() {
     return new ProductBottomSheetPresenterImpl();
   }
 
   @Provides
+  @ApplicationScope
   public ProductService providesProductService(final TheOAppClient theOAppClient) {
     return theOAppClient.getClient();
   }
 
   @Provides
+  @ApplicationScope
   public OappGoogleAuthService providesOappGoogleAuthService(final Application application) {
     return new OappGoogleAuthService(application);
   }
 
   @Provides
+  @ApplicationScope
   public Picasso providesPicasso(final Application application) {
     final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);
     final int cacheSize = maxMemory / 8;
@@ -105,24 +111,4 @@ public class ApplicationModule {
     return picasso;
   }
 
-  @Provides
-  public SignUpWithEmailPresenter signUpWithEmailPresenter(Application applicationContext) {
-    return new SignUpWithEmailPresenterImpl(providesParseService(applicationContext));
-  }
-
-  @Provides
-  public SignInWithEmailPresenter signInWithEmailPresenter(Application applicationContext) {
-    return new SignInWithEmailPresenterImpl(providesParseService(applicationContext));
-  }
-
-  @Provides
-  public ParseService providesParseService(final Application applicationContext) {
-    return new ParseService(applicationContext);
-  }
-
-  @Provides
-  public ParseInit providesParseInit(final Application applicationContext) {
-    return new ParseInit(applicationContext);
-  }
-
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/module/HomeActivityFragmentsModule.java b/app/src/main/java/com/overstock/android/prototype/module/HomeActivityFragmentsModule.java
deleted file mode 100644
index 7517e10..0000000
--- a/app/src/main/java/com/overstock/android/prototype/module/HomeActivityFragmentsModule.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.overstock.android.prototype.module;
-
-import com.overstock.android.prototype.fragment.GoogleFederatedIdentityFragment;
-import com.overstock.android.prototype.fragment.HomeFragment;
-import com.overstock.android.prototype.fragment.SignInWithEmailFragment;
-import com.overstock.android.prototype.fragment.SignUpWithEmailFragment;
-import com.overstock.android.prototype.module.scope.ActivityScope;
-
-import dagger.Module;
-import dagger.Provides;
-
-/**
- * Created by itowey on 11/03/16.
- */
-@Module
-public class HomeActivityFragmentsModule {
-
-  @Provides
-  @ActivityScope
-  public HomeFragment providesHomeFragment() {
-    return new HomeFragment();
-  }
-
-  @Provides
-  @ActivityScope
-  public GoogleFederatedIdentityFragment providesGoogleFederatedIdentityFragment() {
-    return new GoogleFederatedIdentityFragment();
-  }
-}
diff --git a/app/src/main/java/com/overstock/android/prototype/module/HomeActivityModule.java b/app/src/main/java/com/overstock/android/prototype/module/HomeActivityModule.java
new file mode 100644
index 0000000..086066e
--- /dev/null
+++ b/app/src/main/java/com/overstock/android/prototype/module/HomeActivityModule.java
@@ -0,0 +1,53 @@
+package com.overstock.android.prototype.module;
+
+import android.app.Application;
+
+import com.overstock.android.prototype.fragment.GoogleFederatedIdentityFragment;
+import com.overstock.android.prototype.fragment.HomeFragment;
+import com.overstock.android.prototype.module.scope.ActivityScope;
+import com.overstock.android.prototype.presenter.SignInWithEmailPresenter;
+import com.overstock.android.prototype.presenter.SignUpWithEmailPresenter;
+import com.overstock.android.prototype.presenter.impl.SignInWithEmailPresenterImpl;
+import com.overstock.android.prototype.presenter.impl.SignUpWithEmailPresenterImpl;
+import com.overstock.android.prototype.service.ParseService;
+
+import dagger.Module;
+import dagger.Provides;
+
+/**
+ * Created by itowey on 11/03/16.
+ */
+@Module
+public class HomeActivityModule {
+
+  @Provides
+  @ActivityScope
+  public HomeFragment providesHomeFragment() {
+    return new HomeFragment();
+  }
+
+  @Provides
+  @ActivityScope
+  public GoogleFederatedIdentityFragment providesGoogleFederatedIdentityFragment() {
+    return new GoogleFederatedIdentityFragment();
+  }
+
+  @Provides
+  @ActivityScope
+  public ParseService providesParseService(final Application applicationContext) {
+    return new ParseService(applicationContext);
+  }
+
+
+  @Provides
+  @ActivityScope
+  public SignUpWithEmailPresenter signUpWithEmailPresenter(ParseService parseService) {
+    return new SignUpWithEmailPresenterImpl(parseService);
+  }
+
+  @Provides
+  @ActivityScope
+  public SignInWithEmailPresenter signInWithEmailPresenter(ParseService parseService) {
+    return new SignInWithEmailPresenterImpl(parseService);
+  }
+}
diff --git a/app/src/main/java/com/overstock/android/prototype/presenter/SignInWithEmailPresenter.java b/app/src/main/java/com/overstock/android/prototype/presenter/SignInWithEmailPresenter.java
index 82fef01..4298d46 100644
--- a/app/src/main/java/com/overstock/android/prototype/presenter/SignInWithEmailPresenter.java
+++ b/app/src/main/java/com/overstock/android/prototype/presenter/SignInWithEmailPresenter.java
@@ -12,4 +12,6 @@ public interface SignInWithEmailPresenter {
   void onSignIn(final String username, final String password);
 
   void onDestroy();
+
+  void validateCredentials(final String username, final String password);
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/presenter/SignUpWithEmailPresenter.java b/app/src/main/java/com/overstock/android/prototype/presenter/SignUpWithEmailPresenter.java
index fc810b4..0b2cbbd 100644
--- a/app/src/main/java/com/overstock/android/prototype/presenter/SignUpWithEmailPresenter.java
+++ b/app/src/main/java/com/overstock/android/prototype/presenter/SignUpWithEmailPresenter.java
@@ -12,4 +12,6 @@ public interface SignUpWithEmailPresenter {
     void onSignUp(final String username, final String password);
 
     void onDestroy();
+
+    void validateCredentials(final String username, final String password, final String confirmPassword);
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/presenter/impl/SignInWithEmailPresenterImpl.java b/app/src/main/java/com/overstock/android/prototype/presenter/impl/SignInWithEmailPresenterImpl.java
index 2c09766..afccdbb 100644
--- a/app/src/main/java/com/overstock/android/prototype/presenter/impl/SignInWithEmailPresenterImpl.java
+++ b/app/src/main/java/com/overstock/android/prototype/presenter/impl/SignInWithEmailPresenterImpl.java
@@ -1,5 +1,7 @@
 package com.overstock.android.prototype.presenter.impl;
 
+import javax.inject.Inject;
+
 import android.util.Log;
 
 import com.overstock.android.prototype.presenter.SignInWithEmailPresenter;
@@ -17,6 +19,7 @@ public class SignInWithEmailPresenterImpl implements SignInWithEmailPresenter {
 
   private ParseService parseService;
 
+  @Inject
   public SignInWithEmailPresenterImpl(ParseService parseService) {
     this.parseService = parseService;
   }
@@ -28,12 +31,22 @@ public class SignInWithEmailPresenterImpl implements SignInWithEmailPresenter {
 
   @Override
   public void onSignIn(final String username, final String password) {
-    Log.d(TAG, "Calling ParseService for user SignIn");
-    parseService.loginParseUser(username, password);
+    Log.d(TAG, "Calling Parse Service for user Sign In");
+    parseService.loginParseUser(username, password, signInWithEmailView);
   }
 
   @Override
   public void onDestroy() {
     this.signInWithEmailView = null;
   }
+
+  @Override
+  public void validateCredentials(String username, String password) {
+    if (username.isEmpty() || password.isEmpty()) {
+      signInWithEmailView.displayToast("All fields are required.");
+    }
+    else {
+      onSignIn(username, password);
+    }
+  }
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/presenter/impl/SignUpWithEmailPresenterImpl.java b/app/src/main/java/com/overstock/android/prototype/presenter/impl/SignUpWithEmailPresenterImpl.java
index 3128fe8..0817a9e 100644
--- a/app/src/main/java/com/overstock/android/prototype/presenter/impl/SignUpWithEmailPresenterImpl.java
+++ b/app/src/main/java/com/overstock/android/prototype/presenter/impl/SignUpWithEmailPresenterImpl.java
@@ -1,5 +1,7 @@
 package com.overstock.android.prototype.presenter.impl;
 
+import javax.inject.Inject;
+
 import android.util.Log;
 
 import com.overstock.android.prototype.presenter.SignUpWithEmailPresenter;
@@ -13,27 +15,41 @@ public class SignUpWithEmailPresenterImpl implements SignUpWithEmailPresenter {
 
   private static final String TAG = SignUpWithEmailPresenterImpl.class.getName();
 
-  private SignUpWithEmailView connectWithEmailView;
+  private SignUpWithEmailView signUpWithEmailView;
 
   private ParseService parseService;
 
+  @Inject
   public SignUpWithEmailPresenterImpl(ParseService parseService) {
     this.parseService = parseService;
   }
 
   @Override
-  public void setView(final SignUpWithEmailView connectWithEmailView) {
-    this.connectWithEmailView = connectWithEmailView;
+  public void setView(final SignUpWithEmailView signUpWithEmailView) {
+    this.signUpWithEmailView = signUpWithEmailView;
   }
 
   @Override
   public void onSignUp(final String username, final String password) {
     Log.d(TAG, "Calling ParseService for user SignUp");
-    parseService.signUpNewParseUser(username, password);
+    parseService.signUpNewParseUser(username, password, signUpWithEmailView);
   }
 
   @Override
   public void onDestroy() {
-    connectWithEmailView = null;
+    signUpWithEmailView = null;
+  }
+
+  @Override
+  public void validateCredentials(String username, String password, String confirmPassword) {
+    if (username.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
+      signUpWithEmailView.displayToast("All fields are required.");
+    }
+    else if (!password.equals(confirmPassword)) {
+      signUpWithEmailView.displayToast("Passwords do not match.");
+    }
+    else {
+      onSignUp(username, password);
+    }
   }
 }
diff --git a/app/src/main/java/com/overstock/android/prototype/service/ParseInit.java b/app/src/main/java/com/overstock/android/prototype/service/ParseInit.java
deleted file mode 100644
index 01fd40a..0000000
--- a/app/src/main/java/com/overstock/android/prototype/service/ParseInit.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.overstock.android.prototype.service;
-
-import android.content.Context;
-
-import com.overstock.android.prototype.R;
-import com.parse.Parse;
-
-/**
- * Created by itowey on 26/04/16.
- */
-public class ParseInit {
-
-    public ParseInit(Context context) {
-        // Parse init
-        Parse.initialize(new Parse.Configuration.Builder(context)
-                .applicationId(context.getString(R.string.parse_application_id))
-                .server(context.getString(R.string.parse_service_url)).build());
-    }
-}
diff --git a/app/src/main/java/com/overstock/android/prototype/service/ParseService.java b/app/src/main/java/com/overstock/android/prototype/service/ParseService.java
index 453c5ec..befb175 100644
--- a/app/src/main/java/com/overstock/android/prototype/service/ParseService.java
+++ b/app/src/main/java/com/overstock/android/prototype/service/ParseService.java
@@ -1,11 +1,10 @@
 package com.overstock.android.prototype.service;
 
 import android.content.Context;
-import android.content.Intent;
 import android.util.Log;
-import android.widget.Toast;
 
-import com.overstock.android.prototype.activity.CommunityActivity;
+import com.overstock.android.prototype.view.SignInWithEmailView;
+import com.overstock.android.prototype.view.SignUpWithEmailView;
 import com.parse.LogInCallback;
 import com.parse.ParseException;
 import com.parse.ParseUser;
@@ -24,35 +23,33 @@ public class ParseService {
     this.context = context;
   }
 
-  public void loginParseUser(String username, String password) {
+  public void loginParseUser(String username, String password, final SignInWithEmailView view) {
     ParseUser.logInInBackground(username, password, new LogInCallback() {
       @Override
       public void done(ParseUser user, ParseException e) {
         if (e == null && user != null) {
-          Log.d(TAG, "Username: " + user.getUsername());
-          // TODO Remove Toast
-          Toast.makeText(context, "Signing in as : " + user.getUsername(), Toast.LENGTH_SHORT).show();
-          final Intent signInIntent = new Intent(context, CommunityActivity.class);
-          signInIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-          context.startActivity(signInIntent);
+          String message = "Email Sign In as: ";
+          Log.d(TAG, message + user.getUsername());
+          view.displayToast(message + user.getUsername());
+          view.navigateToCommunity();
         }
         else if (user == null) {
           // username or password invalid
-          Log.d(TAG, "Username or Password invalid");
-          // TODO Remove Toast
-          Toast.makeText(context, "Username or Password Invalid", Toast.LENGTH_SHORT).show();
+          String message = "Username or Password invalid.";
+          Log.d(TAG, message);
+          view.displayToast(message);
         }
         else {
           // Something went wrong
-          Log.d(TAG, "Error with Parse login", e);
-          // TODO Remove Toast
-          Toast.makeText(context, "Username or Password Invalid", Toast.LENGTH_SHORT).show();
+          String message = "Error with Parse login. ";
+          Log.d(TAG, message, e);
+          view.displayToast(message + e.getMessage());
         }
       }
     });
   }
 
-  public void signUpNewParseUser(String username, String password) {
+  public void signUpNewParseUser(String username, String password, final SignUpWithEmailView view) {
     ParseUser parseUser = new ParseUser();
     parseUser.setUsername(username);
     parseUser.setPassword(password);
@@ -60,17 +57,15 @@ public class ParseService {
       @Override
       public void done(ParseException e) {
         if (e == null) {
-          Log.d(TAG, "Successfully signed up using Parse");
-          // TODO Remove Toast
-          Toast.makeText(context, "Successfully signed up using Parse", Toast.LENGTH_SHORT).show();
-          final Intent signInIntent = new Intent(context, CommunityActivity.class);
-          signInIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-          context.startActivity(signInIntent);
+          String message = "Successfully signed up using Email. ";
+          Log.d(TAG, message);
+          view.displayToast(message);
+          view.navigateToCommunity();
         }
         else {
-          Log.d(TAG, "Unsuccessful Sign Up using Parse", e);
-          // TODO Remove Toast
-          Toast.makeText(context, "Unsuccessful Sign Up using Parse", Toast.LENGTH_SHORT).show();
+          String message = "Unsuccessful Sign Up using Email. ";
+          Log.d(TAG, message + e.getMessage());
+          view.displayToast(message + e.getMessage());
         }
       }
     });
diff --git a/app/src/main/java/com/overstock/android/prototype/view/SignInWithEmailView.java b/app/src/main/java/com/overstock/android/prototype/view/SignInWithEmailView.java
index f930430..b34234d 100644
--- a/app/src/main/java/com/overstock/android/prototype/view/SignInWithEmailView.java
+++ b/app/src/main/java/com/overstock/android/prototype/view/SignInWithEmailView.java
@@ -5,5 +5,9 @@ package com.overstock.android.prototype.view;
  */
 public interface SignInWithEmailView {
 
-    void OnSignInClick();
-}
+  void onSignInClick();
+
+  void displayToast(final String toastMessage);
+
+  void navigateToCommunity();
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/overstock/android/prototype/view/SignUpWithEmailView.java b/app/src/main/java/com/overstock/android/prototype/view/SignUpWithEmailView.java
index 9481c29..e307789 100644
--- a/app/src/main/java/com/overstock/android/prototype/view/SignUpWithEmailView.java
+++ b/app/src/main/java/com/overstock/android/prototype/view/SignUpWithEmailView.java
@@ -5,13 +5,9 @@ package com.overstock.android.prototype.view;
  */
 public interface SignUpWithEmailView {
 
-    void showSignUpSuccess();
+  void displayToast(final String toastMessage);
 
-    void showSignUpError();
+  void onSignUpClick();
 
-    void displayToast(final String toastMessage);
-
-    void OnSignUpClick();
-
-    void navigateToCommunity();
+  void navigateToCommunity();
 }
diff --git a/app/src/main/res/layout/fragment_sign_in_with_email.xml b/app/src/main/res/layout/fragment_sign_in_with_email.xml
index 19cc69c..0e308cf 100644
--- a/app/src/main/res/layout/fragment_sign_in_with_email.xml
+++ b/app/src/main/res/layout/fragment_sign_in_with_email.xml
@@ -46,7 +46,7 @@
 
 
         <TextView
-            android:id="@+id/txt_email_sign_up"
+            android:id="@+id/txt_email_sign_up_link"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_gravity="center"
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index d54a4f3..a27ed55 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -94,7 +94,7 @@
     <!-- Connect with Email Sign Up placeholder text -->
     <string name="password_placeholder_text">Password</string>
     <string name="confirm_password_placeholder_text">Confirm Password</string>
-    <string name="username_placeholder_text">Username</string>
+    <string name="username_placeholder_text">Email</string>
 
     <!-- Parse strings -->
     <string name="parse_service_url">http://parse.parse.dev.ostk.com:8080/parse</string>
diff --git a/app/src/test/java/com/overstock/android/prototype/OAppPrototypeApplicationMockRule.java b/app/src/test/java/com/overstock/android/prototype/OAppPrototypeApplicationMockRule.java
new file mode 100644
index 0000000..ed9e8d2
--- /dev/null
+++ b/app/src/test/java/com/overstock/android/prototype/OAppPrototypeApplicationMockRule.java
@@ -0,0 +1,26 @@
+package com.overstock.android.prototype;
+
+import android.app.Application;
+
+import com.overstock.android.prototype.component.ApplicationComponent;
+import com.overstock.android.prototype.module.ApplicationModule;
+import com.overstock.android.prototype.presenter.SignUpWithEmailPresenter;
+import com.overstock.android.prototype.service.OappGoogleAuthService;
+
+import it.cosenonjaviste.daggermock.DaggerMockRule;
+
+import static org.mockito.Mockito.mock;
+
+/**
+ * Created by itowey on 15/03/16.
+ */
+public class OAppPrototypeApplicationMockRule extends DaggerMockRule<ApplicationComponent> {
+
+    public OAppPrototypeApplicationMockRule()  {
+
+
+        super(ApplicationComponent.class, new ApplicationModule(mock(Application.class)));
+        providesMock(OappGoogleAuthService.class, SignUpWithEmailPresenter.class);
+
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/overstock/android/prototype/TestOAppPrototypeApplication.java b/app/src/test/java/com/overstock/android/prototype/TestOAppPrototypeApplication.java
new file mode 100644
index 0000000..7b3d5bb
--- /dev/null
+++ b/app/src/test/java/com/overstock/android/prototype/TestOAppPrototypeApplication.java
@@ -0,0 +1,34 @@
+package com.overstock.android.prototype;
+
+import com.overstock.android.prototype.component.ApplicationComponent;
+import com.overstock.android.prototype.main.OAppPrototypeApplication;
+
+import org.robolectric.TestLifecycleApplication;
+
+import java.lang.reflect.Method;
+
+/**
+ * Created by itowey on 27/04/16.
+ */
+public class TestOAppPrototypeApplication extends OAppPrototypeApplication implements TestLifecycleApplication {
+
+    @Override
+    public void onCreate() {
+        // Dagger init
+        component = ApplicationComponent.Initializer.init(this);
+
+    }
+
+    @Override
+    public void beforeTest(Method method) {
+    }
+
+    @Override
+    public void prepareTest(Object test) {
+    }
+
+    @Override
+    public void afterTest(Method method) {
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/overstock/android/prototype/activity/ArcMenuFragmentTest.java b/app/src/test/java/com/overstock/android/prototype/activity/ArcMenuFragmentTest.java
index c737f3f..491c08b 100644
--- a/app/src/test/java/com/overstock/android/prototype/activity/ArcMenuFragmentTest.java
+++ b/app/src/test/java/com/overstock/android/prototype/activity/ArcMenuFragmentTest.java
@@ -1,5 +1,6 @@
 package com.overstock.android.prototype.activity;
 
+import android.app.Application;
 import android.os.Build;
 import android.support.v4.app.FragmentActivity;
 import android.widget.FrameLayout;
@@ -7,11 +8,11 @@ import android.widget.ImageButton;
 
 import com.ogaclejapan.arclayout.ArcLayout;
 import com.overstock.android.prototype.BuildConfig;
+import com.overstock.android.prototype.OAppPrototypeApplicationMockRule;
 import com.overstock.android.prototype.R;
 import com.overstock.android.prototype.component.ApplicationComponent;
 import com.overstock.android.prototype.component.FeedActivityComponent;
 import com.overstock.android.prototype.fragment.ArcMenuFragment;
-import com.overstock.android.prototype.main.OAppPrototypeApplication;
 import com.overstock.android.prototype.module.ApplicationModule;
 import com.overstock.android.prototype.module.FeedActivityModule;
 
@@ -28,6 +29,7 @@ import it.cosenonjaviste.daggermock.DaggerMockRule;
 
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNotNull;
+import static org.mockito.Mockito.mock;
 import static org.robolectric.shadows.support.v4.SupportFragmentTestUtil.startFragment;
 
 /**
@@ -36,16 +38,19 @@ import static org.robolectric.shadows.support.v4.SupportFragmentTestUtil.startFr
  * @author RayConnolly Created on 4/7/2016.
  */
 
-@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP)
+@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP, application =  com.overstock.android.prototype.TestOAppPrototypeApplication.class)
 @RunWith(RobolectricGradleTestRunner.class)
 public class ArcMenuFragmentTest  {
 
     private ArcMenuFragment arcMenuFragment;
 
     @Rule
+    public OAppPrototypeApplicationMockRule oAppPrototypeApplicationMockRule = new OAppPrototypeApplicationMockRule();
+
+    @Rule
     public final DaggerMockRule<FeedActivityComponent> mockRule1 = new DaggerMockRule<>(FeedActivityComponent.class,
             new FeedActivityModule()).addComponentDependency(ApplicationComponent.class,
-            new ApplicationModule(new OAppPrototypeApplication()));
+            new ApplicationModule(mock(Application.class)));
 
     @Before
     public void setUp() {
diff --git a/app/src/test/java/com/overstock/android/prototype/activity/BrandActivityTest.java b/app/src/test/java/com/overstock/android/prototype/activity/BrandActivityTest.java
index a0ef366..0cedd65 100644
--- a/app/src/test/java/com/overstock/android/prototype/activity/BrandActivityTest.java
+++ b/app/src/test/java/com/overstock/android/prototype/activity/BrandActivityTest.java
@@ -3,6 +3,7 @@ package com.overstock.android.prototype.activity;
 import android.os.Build;
 
 import com.overstock.android.prototype.BuildConfig;
+import com.overstock.android.prototype.OAppPrototypeApplicationMockRule;
 import com.overstock.android.prototype.component.ApplicationComponent;
 import com.overstock.android.prototype.component.FeedActivityComponent;
 import com.overstock.android.prototype.main.OAppPrototypeApplication;
@@ -25,10 +26,12 @@ import static org.junit.Assert.assertNotNull;
 /**
  * @author LeeMeehan Created on 06-Apr-16.
  */
-@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP)
+@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP, application =  com.overstock.android.prototype.TestOAppPrototypeApplication.class)
 @RunWith(RobolectricGradleTestRunner.class)
 public class BrandActivityTest  {
 
+  @Rule
+  public OAppPrototypeApplicationMockRule oAppPrototypeApplicationMockRule = new OAppPrototypeApplicationMockRule();
 
   @Rule
   public final DaggerMockRule<FeedActivityComponent> mockRule1 = new DaggerMockRule<>(FeedActivityComponent.class,
diff --git a/app/src/test/java/com/overstock/android/prototype/activity/FeedActivityTest.java b/app/src/test/java/com/overstock/android/prototype/activity/FeedActivityTest.java
index b00e2f7..b2fdef3 100644
--- a/app/src/test/java/com/overstock/android/prototype/activity/FeedActivityTest.java
+++ b/app/src/test/java/com/overstock/android/prototype/activity/FeedActivityTest.java
@@ -5,6 +5,7 @@ import android.support.design.widget.TabLayout;
 import android.support.v4.view.ViewPager;
 
 import com.overstock.android.prototype.BuildConfig;
+import com.overstock.android.prototype.OAppPrototypeApplicationMockRule;
 import com.overstock.android.prototype.R;
 import com.overstock.android.prototype.component.ApplicationComponent;
 import com.overstock.android.prototype.component.FeedActivityComponent;
@@ -29,13 +30,16 @@ import static org.junit.Assert.assertNotNull;
 /**
  * @author LeeMeehan Created on 29-Mar-16.
  */
-@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP)
+@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP, application =  com.overstock.android.prototype.TestOAppPrototypeApplication.class)
 @RunWith(RobolectricGradleTestRunner.class)
 public class FeedActivityTest {
 
   private FeedActivity feedActivity;
 
   @Rule
+  public OAppPrototypeApplicationMockRule oAppPrototypeApplicationMockRule = new OAppPrototypeApplicationMockRule();
+
+  @Rule
   public final DaggerMockRule<FeedActivityComponent> mockRule1 = new DaggerMockRule<>(FeedActivityComponent.class,
           new FeedActivityModule()).addComponentDependency(ApplicationComponent.class,
           new ApplicationModule(new OAppPrototypeApplication()));
diff --git a/app/src/test/java/com/overstock/android/prototype/activity/HomeActivityTest.java b/app/src/test/java/com/overstock/android/prototype/activity/HomeActivityTest.java
index dbece7f..6e49faf 100644
--- a/app/src/test/java/com/overstock/android/prototype/activity/HomeActivityTest.java
+++ b/app/src/test/java/com/overstock/android/prototype/activity/HomeActivityTest.java
@@ -1,5 +1,28 @@
 package com.overstock.android.prototype.activity;
 
+import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertNotNull;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.concurrent.TimeUnit;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowActivity;
+import org.robolectric.shadows.ShadowToast;
+
 import android.content.Intent;
 import android.os.Build;
 import android.support.annotation.NonNull;
@@ -15,35 +38,13 @@ import com.overstock.android.prototype.R;
 import com.overstock.android.prototype.component.ApplicationComponent;
 import com.overstock.android.prototype.fragment.GoogleFederatedIdentityFragment;
 import com.overstock.android.prototype.fragment.HomeFragment;
+import com.overstock.android.prototype.fragment.SignInWithEmailFragment;
 import com.overstock.android.prototype.main.OAppPrototypeApplication;
 import com.overstock.android.prototype.module.ApplicationModule;
 import com.overstock.android.prototype.service.OappGoogleAuthService;
 
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowActivity;
-import org.robolectric.shadows.ShadowToast;
-
-import java.util.concurrent.TimeUnit;
-
 import it.cosenonjaviste.daggermock.DaggerMockRule;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNotNull;
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
 /**
  * Simple Test class to test that the Home Activity was created successfully
  *
@@ -51,7 +52,7 @@ import static org.mockito.Mockito.when;
  */
 @Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP)
 @RunWith(RobolectricGradleTestRunner.class)
-public abstract class HomeActivityTest  {
+public abstract class HomeActivityTest {
 
   private static final String TEST_USERNAME = "Test User";
 
@@ -111,13 +112,13 @@ public abstract class HomeActivityTest  {
             }
           });
 
-  @Mock
-  private OappGoogleAuthService oappGoogleAuthService;
-
   protected HomeActivity homeActivity;
 
   protected HomeFragment homeFragment;
 
+  @Mock
+  private OappGoogleAuthService oappGoogleAuthService;
+
   @Before
   public void setUp() {
     when(oappGoogleAuthService.signIn()).thenReturn(null);
@@ -129,11 +130,11 @@ public abstract class HomeActivityTest  {
   }
 
   @After
-  public void tearDown(){
+  public void tearDown() {
     Robolectric.reset();
   }
 
-  protected void flushRobo(){
+  protected void flushRobo() {
     Robolectric.flushBackgroundThreadScheduler();
     Robolectric.flushForegroundThreadScheduler();
   }
@@ -147,10 +148,12 @@ public abstract class HomeActivityTest  {
     // Assert elements are visible.
     Button faceBookButton = (Button) homeFragment.getView().findViewById(R.id.facebook_login_btn);
     Button googlePlusButton = (Button) homeFragment.getView().findViewById(R.id.googlePlus_login_btn);
+    Button emailConnectButton = (Button) homeFragment.getView().findViewById(R.id.email_login_btn);
     Button guestLogin = (Button) homeFragment.getView().findViewById(R.id.guest_login_btn);
 
     assertNotNull(faceBookButton);
     assertNotNull(googlePlusButton);
+    assertNotNull(emailConnectButton);
     assertNotNull(guestLogin);
   }
 
@@ -175,6 +178,25 @@ public abstract class HomeActivityTest  {
   }
 
   @Test
+  public void testEmailLoginButton_CLICKED() {
+    flushRobo();
+    Button emailLoginButton = (Button) homeFragment.getView().findViewById(R.id.email_login_btn);
+    emailLoginButton.performClick();
+
+    SignInWithEmailFragment signInWithEmailFragment = (SignInWithEmailFragment) homeActivity.getSupportFragmentManager()
+        .findFragmentByTag(SignInWithEmailFragment.TAG);
+    assertNotNull("The SignInWithEmailFragment was not committed to the page.", signInWithEmailFragment);
+
+    ShadowActivity shadowActivity = Shadows.shadowOf(homeActivity);
+    // peekNextStartedActivity dose not consume intent.
+    Intent startedIntent = shadowActivity.peekNextStartedActivity();
+    assertNotNull("The started intent is null. No Activity has started.", startedIntent);
+    assertNotNull("The intent is a empty.", startedIntent.getComponent());
+    assertThat("The started Activity is not the activity that is expected", startedIntent.getComponent().getClassName(),
+      equalTo(CommunityActivity.class.getName()));
+  }
+
+  @Test
   public void testFaceBookLoginButton_CLICKED() {
     flushRobo();
     Button faceBookButton = (Button) homeFragment.getView().findViewById(R.id.facebook_login_btn);
diff --git a/app/src/test/java/com/overstock/android/prototype/adapter/OptionAdapterTest.java b/app/src/test/java/com/overstock/android/prototype/adapter/OptionAdapterTest.java
index 0a24ef5..11043d9 100644
--- a/app/src/test/java/com/overstock/android/prototype/adapter/OptionAdapterTest.java
+++ b/app/src/test/java/com/overstock/android/prototype/adapter/OptionAdapterTest.java
@@ -1,12 +1,15 @@
 package com.overstock.android.prototype.adapter;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.when;
+import android.app.Activity;
+import android.os.Build;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
 
-import java.util.ArrayList;
+import com.overstock.android.prototype.BuildConfig;
+import com.overstock.android.prototype.adapters.OptionAdapter;
+import com.overstock.android.prototype.model.Options;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -16,22 +19,19 @@ import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
-import android.app.Activity;
-import android.os.Build;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.TextView;
+import java.util.ArrayList;
 
-import com.overstock.android.prototype.BuildConfig;
-import com.overstock.android.prototype.adapters.OptionAdapter;
-import com.overstock.android.prototype.model.Options;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.when;
 
 /**
  * @author LeeMeehan
  * @since Created on 14-Apr-16.
  */
-@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP)
+@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP, application =  com.overstock.android.prototype.TestOAppPrototypeApplication.class)
 @RunWith(RobolectricGradleTestRunner.class)
 public class OptionAdapterTest {
 
diff --git a/app/src/test/java/com/overstock/android/prototype/fragment/ProductBottomSheetFragmentTest.java b/app/src/test/java/com/overstock/android/prototype/fragment/ProductBottomSheetFragmentTest.java
index 9b346c5..ce17924 100644
--- a/app/src/test/java/com/overstock/android/prototype/fragment/ProductBottomSheetFragmentTest.java
+++ b/app/src/test/java/com/overstock/android/prototype/fragment/ProductBottomSheetFragmentTest.java
@@ -36,7 +36,7 @@ import static org.robolectric.shadows.support.v4.SupportFragmentTestUtil.startFr
  * @author LeeMeehan.
  * @since Created on 13-Apr-16
  */
-@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP)
+@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP, application =  com.overstock.android.prototype.TestOAppPrototypeApplication.class)
 @RunWith(RobolectricGradleTestRunner.class)
 public class ProductBottomSheetFragmentTest {
 
diff --git a/app/src/test/java/com/overstock/android/prototype/presenter/SignInWithEmailPresenterTest.java b/app/src/test/java/com/overstock/android/prototype/presenter/SignInWithEmailPresenterTest.java
new file mode 100644
index 0000000..07bb96b
--- /dev/null
+++ b/app/src/test/java/com/overstock/android/prototype/presenter/SignInWithEmailPresenterTest.java
@@ -0,0 +1,64 @@
+package com.overstock.android.prototype.presenter;
+
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import android.os.Build;
+
+import com.overstock.android.prototype.BuildConfig;
+import com.overstock.android.prototype.presenter.impl.SignInWithEmailPresenterImpl;
+import com.overstock.android.prototype.service.ParseService;
+import com.overstock.android.prototype.view.SignInWithEmailView;
+
+/**
+ * Created by gcarroll on 27/04/2016.
+ */
+@Config(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP, application = com.overstock.android.prototype.TestOAppPrototypeApplication.class)
+@RunWith(RobolectricGradleTestRunner.class)
+public class SignInWithEmailPresenterTest {
+
+  private static final String USERNAME = "gcarroll@overstock.com";
+
+  private static final String PASSWORD = "1234";
+
+  @Mock
+  private ParseService parseService;
+
+  @Mock
+  private SignInWithEmailView signInWithEmailView;
+
+  private SignInWithEmailPresenter signInWithEmailPresenter;
+
+  @Before
+  public void setUp() {
+    MockitoAnnotations.initMocks(this);
+    signInWithEmailPresenter = new SignInWithEmailPresenterImpl(parseService);
+    signInWithEmailPresenter.setView(signInWithEmailView);
+  }
+
+  @Test
+  public void testValidateCredentials_GOOD() {
+    signInWithEmailPresenter.validateCredentials(USERNAME, PASSWORD);
+    verify(parseService).loginParseUser(USERNAME, PASSWORD, signInWithEmailView);
+  }
+
+  @Test
+  public void testValidateCredentials_NO_USERNAME() {
+    signInWithEmailPresenter.validateCredentials("", PASSWORD);
+    verify(signInWithEmailView).displayToast(anyString());
+  }
+
+  @Test
+  public void testValidateCredentials_NO_PASSWORD() throws Exception {
+    signInWithEmailPresenter.validateCredentials(USERNAME, "");
+    verify(signInWithEmailView).displayToast(anyString());
+  }
+}
diff --git a/build.gradle b/build.gradle
index 29cd736..3ca7b0c 100644
--- a/build.gradle
+++ b/build.gradle
@@ -9,7 +9,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0'
+        classpath 'com.android.tools.build:gradle:2.1.0'
         classpath 'com.google.gms:google-services:2.0.0-beta6'
         classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
         classpath 'org.ajoberstar:gradle-jacoco:0.1.0'
diff --git a/gradle.properties b/gradle.properties
index 86064f3..7ccb675 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -10,7 +10,7 @@
 # Specifies the JVM arguments used for the daemon process.
 # The setting is particularly useful for tweaking memory settings.
 # Default value: -Xmx10248m -XX:MaxPermSize=256m
-# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+ org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
 
 # When configured, Gradle will run in incubating parallel mode.
 # This option should only be used with decoupled projects. More details, visit
diff --git a/gradlew b/gradlew
old mode 100755
new mode 100644
